[project]
name = "agentic-python-coder"
version = "1.0.0"
description = "A lightweight Python coding agent that writes, executes, and iterates on code through natural language instructions"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Stefan Szeider"}
]
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "coding", "agent", "llm", "code-generation", "automation"]
dependencies = [
    "langgraph>=0.6.2",
    "langchain-core>=0.3.72",
    "langchain-openai>=0.3.28",
    "langchain-anthropic>=0.3.0",
    "langchain-experimental>=0.3.4",
    "python-dotenv>=1.1.1",
    "rich>=13.0.0",
    "jupyter-client>=8.6.0",
    "ipykernel>=6.29.0",
    "PyYAML>=6.0.0",
]

[project.scripts]
coder = "coder.cli:main"

[project.optional-dependencies]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-watch>=4.2.0",
]
dev = [
    "ruff>=0.7.0",
    "mypy>=1.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["coder/src/coder"]

[tool.pytest.ini_options]
pythonpath = ["coder/src"]

[tool.ruff]
target-version = "py311"
line-length = 88
exclude = ["CPBENCH", "LOCAL", "TRASH", "examples"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true


